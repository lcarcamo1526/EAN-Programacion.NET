//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CRUD_Employees.Model
{
    using System;
    using System.Collections.Generic;
    using System.Data.Entity.Core.Objects;
    using System.Data.Entity.Infrastructure;
    using System.Linq;
    using System.Windows;

    public partial class Employee
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Employee()
        {
            this.Employees1 = new HashSet<Employee>();
        }

        public int EmployeeID { get; set; }
        public string LastName { get; set; }
        public string FirstName { get; set; }
        public string Title { get; set; }
        public string TitleOfCourtesy { get; set; }
        public Nullable<System.DateTime> BirthDate { get; set; }
        public Nullable<System.DateTime> HireDate { get; set; }
        public string Address { get; set; }
        public string City { get; set; }
        public string Region { get; set; }
        public string PostalCode { get; set; }
        public string Country { get; set; }
        public string HomePhone { get; set; }
        public string Extension { get; set; }
        public byte[] Photo { get; set; }
        public string Notes { get; set; }
        public Nullable<int> ReportsTo { get; set; }
        public string PhotoPath { get; set; }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Employee> Employees1 { get; set; }
        public virtual Employee Employee1 { get; set; }

        public void Delete()
        {
            var ctx = new NorthwindEntities();

            try
            {
                int id = this.EmployeeID;
                var emp = (from e in ctx.Employees where e.EmployeeID == id select e).First();
                //ctx.Employees.Remove(emp);
                ctx.Employees.Remove(emp);
                ctx.SaveChanges();
                MessageBox.Show("The employee has been deleted");
            }
            catch (Exception)
            {
                MessageBox.Show("This employee can not be deleted because he/she has things to do, but i'm going to disable it, try with other Employee");

            }


        }

        public void UpdateEmployee()
        {
            using (var ctx = new NorthwindEntities())
            {
                int id = this.EmployeeID;
                var emp = (from e in ctx.Employees where e.EmployeeID == id select e).First();
                emp.FirstName = this.FirstName;
                emp.LastName = this.LastName;
                emp.BirthDate = this.BirthDate;
                emp.Address = this.Address;
                ctx.SaveChanges();
            }
        }

        public void Insert()
        {
            using (var ctx = new NorthwindEntities())
            {
                Employee emp = new Employee
                {
                    BirthDate = this.BirthDate,
                    FirstName = this.FirstName,
                    LastName = this.LastName,
                };
                ctx.Employees.Add(emp);
                ctx.SaveChanges();
                this.EmployeeID = emp.EmployeeID;
            }
        }
    }

}
